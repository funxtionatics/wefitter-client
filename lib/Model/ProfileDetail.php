<?php
/**
 * ProfileDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  WeFitter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WeFitter API
 *
 * This is the WeFitter API
 *
 * OpenAPI spec version: v1.1
 * Contact: hello@wefitter.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WeFitter\Client\Model;

use \ArrayAccess;
use \WeFitter\Client\ObjectSerializer;

/**
 * ProfileDetail Class Doc Comment
 *
 * @category Class
 * @package  WeFitter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProfileDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProfileDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
'public_id' => 'string',
'given_name' => 'string',
'family_name' => 'string',
'nickname' => 'string',
'gender' => 'string',
'birthdate' => '\DateTime',
'zoneinfo' => 'string',
'locale' => 'string',
'total_calories' => 'float',
'total_distance' => 'float',
'total_steps' => 'float',
'total_points' => 'float',
'reference' => 'string',
'teams' => '\WeFitter\Client\Model\TeamProfile[]',
'avatar' => 'string',
'num_active_challenges' => 'string',
'num_done_challenges' => 'string',
'num_future_challenges' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => 'uri',
'public_id' => 'uuid',
'given_name' => null,
'family_name' => null,
'nickname' => null,
'gender' => null,
'birthdate' => 'date',
'zoneinfo' => null,
'locale' => null,
'total_calories' => null,
'total_distance' => null,
'total_steps' => null,
'total_points' => null,
'reference' => null,
'teams' => null,
'avatar' => 'uri',
'num_active_challenges' => null,
'num_done_challenges' => null,
'num_future_challenges' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
'public_id' => 'public_id',
'given_name' => 'given_name',
'family_name' => 'family_name',
'nickname' => 'nickname',
'gender' => 'gender',
'birthdate' => 'birthdate',
'zoneinfo' => 'zoneinfo',
'locale' => 'locale',
'total_calories' => 'total_calories',
'total_distance' => 'total_distance',
'total_steps' => 'total_steps',
'total_points' => 'total_points',
'reference' => 'reference',
'teams' => 'teams',
'avatar' => 'avatar',
'num_active_challenges' => 'num_active_challenges',
'num_done_challenges' => 'num_done_challenges',
'num_future_challenges' => 'num_future_challenges'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
'public_id' => 'setPublicId',
'given_name' => 'setGivenName',
'family_name' => 'setFamilyName',
'nickname' => 'setNickname',
'gender' => 'setGender',
'birthdate' => 'setBirthdate',
'zoneinfo' => 'setZoneinfo',
'locale' => 'setLocale',
'total_calories' => 'setTotalCalories',
'total_distance' => 'setTotalDistance',
'total_steps' => 'setTotalSteps',
'total_points' => 'setTotalPoints',
'reference' => 'setReference',
'teams' => 'setTeams',
'avatar' => 'setAvatar',
'num_active_challenges' => 'setNumActiveChallenges',
'num_done_challenges' => 'setNumDoneChallenges',
'num_future_challenges' => 'setNumFutureChallenges'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
'public_id' => 'getPublicId',
'given_name' => 'getGivenName',
'family_name' => 'getFamilyName',
'nickname' => 'getNickname',
'gender' => 'getGender',
'birthdate' => 'getBirthdate',
'zoneinfo' => 'getZoneinfo',
'locale' => 'getLocale',
'total_calories' => 'getTotalCalories',
'total_distance' => 'getTotalDistance',
'total_steps' => 'getTotalSteps',
'total_points' => 'getTotalPoints',
'reference' => 'getReference',
'teams' => 'getTeams',
'avatar' => 'getAvatar',
'num_active_challenges' => 'getNumActiveChallenges',
'num_done_challenges' => 'getNumDoneChallenges',
'num_future_challenges' => 'getNumFutureChallenges'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GENDER_M = 'M';
const GENDER_F = 'F';
const GENDER_X = 'X';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_M,
self::GENDER_F,
self::GENDER_X,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['public_id'] = isset($data['public_id']) ? $data['public_id'] : null;
        $this->container['given_name'] = isset($data['given_name']) ? $data['given_name'] : null;
        $this->container['family_name'] = isset($data['family_name']) ? $data['family_name'] : null;
        $this->container['nickname'] = isset($data['nickname']) ? $data['nickname'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['birthdate'] = isset($data['birthdate']) ? $data['birthdate'] : null;
        $this->container['zoneinfo'] = isset($data['zoneinfo']) ? $data['zoneinfo'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['total_calories'] = isset($data['total_calories']) ? $data['total_calories'] : null;
        $this->container['total_distance'] = isset($data['total_distance']) ? $data['total_distance'] : null;
        $this->container['total_steps'] = isset($data['total_steps']) ? $data['total_steps'] : null;
        $this->container['total_points'] = isset($data['total_points']) ? $data['total_points'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['teams'] = isset($data['teams']) ? $data['teams'] : null;
        $this->container['avatar'] = isset($data['avatar']) ? $data['avatar'] : null;
        $this->container['num_active_challenges'] = isset($data['num_active_challenges']) ? $data['num_active_challenges'] : null;
        $this->container['num_done_challenges'] = isset($data['num_done_challenges']) ? $data['num_done_challenges'] : null;
        $this->container['num_future_challenges'] = isset($data['num_future_challenges']) ? $data['num_future_challenges'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets public_id
     *
     * @return string
     */
    public function getPublicId()
    {
        return $this->container['public_id'];
    }

    /**
     * Sets public_id
     *
     * @param string $public_id public_id
     *
     * @return $this
     */
    public function setPublicId($public_id)
    {
        $this->container['public_id'] = $public_id;

        return $this;
    }

    /**
     * Gets given_name
     *
     * @return string
     */
    public function getGivenName()
    {
        return $this->container['given_name'];
    }

    /**
     * Sets given_name
     *
     * @param string $given_name given_name
     *
     * @return $this
     */
    public function setGivenName($given_name)
    {
        $this->container['given_name'] = $given_name;

        return $this;
    }

    /**
     * Gets family_name
     *
     * @return string
     */
    public function getFamilyName()
    {
        return $this->container['family_name'];
    }

    /**
     * Sets family_name
     *
     * @param string $family_name family_name
     *
     * @return $this
     */
    public function setFamilyName($family_name)
    {
        $this->container['family_name'] = $family_name;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string $nickname nickname
     *
     * @return $this
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return \DateTime
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param \DateTime $birthdate birthdate
     *
     * @return $this
     */
    public function setBirthdate($birthdate)
    {
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets zoneinfo
     *
     * @return string
     */
    public function getZoneinfo()
    {
        return $this->container['zoneinfo'];
    }

    /**
     * Sets zoneinfo
     *
     * @param string $zoneinfo zoneinfo
     *
     * @return $this
     */
    public function setZoneinfo($zoneinfo)
    {
        $this->container['zoneinfo'] = $zoneinfo;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets total_calories
     *
     * @return float
     */
    public function getTotalCalories()
    {
        return $this->container['total_calories'];
    }

    /**
     * Sets total_calories
     *
     * @param float $total_calories total_calories
     *
     * @return $this
     */
    public function setTotalCalories($total_calories)
    {
        $this->container['total_calories'] = $total_calories;

        return $this;
    }

    /**
     * Gets total_distance
     *
     * @return float
     */
    public function getTotalDistance()
    {
        return $this->container['total_distance'];
    }

    /**
     * Sets total_distance
     *
     * @param float $total_distance total_distance
     *
     * @return $this
     */
    public function setTotalDistance($total_distance)
    {
        $this->container['total_distance'] = $total_distance;

        return $this;
    }

    /**
     * Gets total_steps
     *
     * @return float
     */
    public function getTotalSteps()
    {
        return $this->container['total_steps'];
    }

    /**
     * Sets total_steps
     *
     * @param float $total_steps total_steps
     *
     * @return $this
     */
    public function setTotalSteps($total_steps)
    {
        $this->container['total_steps'] = $total_steps;

        return $this;
    }

    /**
     * Gets total_points
     *
     * @return float
     */
    public function getTotalPoints()
    {
        return $this->container['total_points'];
    }

    /**
     * Sets total_points
     *
     * @param float $total_points total_points
     *
     * @return $this
     */
    public function setTotalPoints($total_points)
    {
        $this->container['total_points'] = $total_points;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets teams
     *
     * @return \WeFitter\Client\Model\TeamProfile[]
     */
    public function getTeams()
    {
        return $this->container['teams'];
    }

    /**
     * Sets teams
     *
     * @param \WeFitter\Client\Model\TeamProfile[] $teams Team of which this profile is a member of
     *
     * @return $this
     */
    public function setTeams($teams)
    {
        $this->container['teams'] = $teams;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string $avatar avatar
     *
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets num_active_challenges
     *
     * @return string
     */
    public function getNumActiveChallenges()
    {
        return $this->container['num_active_challenges'];
    }

    /**
     * Sets num_active_challenges
     *
     * @param string $num_active_challenges num_active_challenges
     *
     * @return $this
     */
    public function setNumActiveChallenges($num_active_challenges)
    {
        $this->container['num_active_challenges'] = $num_active_challenges;

        return $this;
    }

    /**
     * Gets num_done_challenges
     *
     * @return string
     */
    public function getNumDoneChallenges()
    {
        return $this->container['num_done_challenges'];
    }

    /**
     * Sets num_done_challenges
     *
     * @param string $num_done_challenges num_done_challenges
     *
     * @return $this
     */
    public function setNumDoneChallenges($num_done_challenges)
    {
        $this->container['num_done_challenges'] = $num_done_challenges;

        return $this;
    }

    /**
     * Gets num_future_challenges
     *
     * @return string
     */
    public function getNumFutureChallenges()
    {
        return $this->container['num_future_challenges'];
    }

    /**
     * Sets num_future_challenges
     *
     * @param string $num_future_challenges num_future_challenges
     *
     * @return $this
     */
    public function setNumFutureChallenges($num_future_challenges)
    {
        $this->container['num_future_challenges'] = $num_future_challenges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
