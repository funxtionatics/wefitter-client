<?php
/**
 * StressSummaryLinked
 *
 * PHP version 5
 *
 * @category Class
 * @package  WeFitter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WeFitter API
 *
 * This is the WeFitter API
 *
 * OpenAPI spec version: v1.1
 * Contact: hello@wefitter.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WeFitter\Client\Model;

use \ArrayAccess;
use \WeFitter\Client\ObjectSerializer;

/**
 * StressSummaryLinked Class Doc Comment
 *
 * @category Class
 * @package  WeFitter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StressSummaryLinked implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StressSummaryLinked';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'stress_qualifier' => 'string',
'average_stress_level' => 'int',
'max_stress_level' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'stress_qualifier' => null,
'average_stress_level' => null,
'max_stress_level' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stress_qualifier' => 'stress_qualifier',
'average_stress_level' => 'average_stress_level',
'max_stress_level' => 'max_stress_level'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stress_qualifier' => 'setStressQualifier',
'average_stress_level' => 'setAverageStressLevel',
'max_stress_level' => 'setMaxStressLevel'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stress_qualifier' => 'getStressQualifier',
'average_stress_level' => 'getAverageStressLevel',
'max_stress_level' => 'getMaxStressLevel'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STRESS_QUALIFIER_UNKNOWN = 'UNKNOWN';
const STRESS_QUALIFIER_CALM = 'CALM';
const STRESS_QUALIFIER_BALANCED = 'BALANCED';
const STRESS_QUALIFIER_STRESSFUL = 'STRESSFUL';
const STRESS_QUALIFIER_VERY_STRESSFUL = 'VERY_STRESSFUL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStressQualifierAllowableValues()
    {
        return [
            self::STRESS_QUALIFIER_UNKNOWN,
self::STRESS_QUALIFIER_CALM,
self::STRESS_QUALIFIER_BALANCED,
self::STRESS_QUALIFIER_STRESSFUL,
self::STRESS_QUALIFIER_VERY_STRESSFUL,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stress_qualifier'] = isset($data['stress_qualifier']) ? $data['stress_qualifier'] : null;
        $this->container['average_stress_level'] = isset($data['average_stress_level']) ? $data['average_stress_level'] : null;
        $this->container['max_stress_level'] = isset($data['max_stress_level']) ? $data['max_stress_level'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['stress_qualifier'] === null) {
            $invalidProperties[] = "'stress_qualifier' can't be null";
        }
        $allowedValues = $this->getStressQualifierAllowableValues();
        if (!is_null($this->container['stress_qualifier']) && !in_array($this->container['stress_qualifier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'stress_qualifier', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stress_qualifier
     *
     * @return string
     */
    public function getStressQualifier()
    {
        return $this->container['stress_qualifier'];
    }

    /**
     * Sets stress_qualifier
     *
     * @param string $stress_qualifier Qualifier describing stress level.
     *
     * @return $this
     */
    public function setStressQualifier($stress_qualifier)
    {
        $allowedValues = $this->getStressQualifierAllowableValues();
        if (!in_array($stress_qualifier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'stress_qualifier', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stress_qualifier'] = $stress_qualifier;

        return $this;
    }

    /**
     * Gets average_stress_level
     *
     * @return int
     */
    public function getAverageStressLevel()
    {
        return $this->container['average_stress_level'];
    }

    /**
     * Sets average_stress_level
     *
     * @param int $average_stress_level Average stress level.
     *
     * @return $this
     */
    public function setAverageStressLevel($average_stress_level)
    {
        $this->container['average_stress_level'] = $average_stress_level;

        return $this;
    }

    /**
     * Gets max_stress_level
     *
     * @return int
     */
    public function getMaxStressLevel()
    {
        return $this->container['max_stress_level'];
    }

    /**
     * Sets max_stress_level
     *
     * @param int $max_stress_level Maximum stress level.
     *
     * @return $this
     */
    public function setMaxStressLevel($max_stress_level)
    {
        $this->container['max_stress_level'] = $max_stress_level;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
