<?php
/**
 * ChallengeApi
 * PHP version 5
 *
 * @category Class
 * @package  WeFitter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WeFitter API
 *
 * This is the WeFitter API
 *
 * OpenAPI spec version: v1.1
 * Contact: hello@wefitter.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WeFitter\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WeFitter\Client\ApiException;
use WeFitter\Client\Configuration;
use WeFitter\Client\HeaderSelector;
use WeFitter\Client\ObjectSerializer;

/**
 * ChallengeApi Class Doc Comment
 *
 * @category Class
 * @package  WeFitter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChallengeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation challengeCreate
     *
     * Create challenge
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body body (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ChallengeDetail
     */
    public function challengeCreate($body)
    {
        list($response) = $this->challengeCreateWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation challengeCreateWithHttpInfo
     *
     * Create challenge
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ChallengeDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeCreateWithHttpInfo($body)
    {
        $returnType = '\WeFitter\Client\Model\ChallengeDetail';
        $request = $this->challengeCreateRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ChallengeDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengeCreateAsync
     *
     * Create challenge
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeCreateAsync($body)
    {
        return $this->challengeCreateAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeCreateAsyncWithHttpInfo
     *
     * Create challenge
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeCreateAsyncWithHttpInfo($body)
    {
        $returnType = '\WeFitter\Client\Model\ChallengeDetail';
        $request = $this->challengeCreateRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeCreate'
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeCreateRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling challengeCreate'
            );
        }

        $resourcePath = '/challenge/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengeDelete
     *
     * Delete challenge
     *
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function challengeDelete($public_id)
    {
        $this->challengeDeleteWithHttpInfo($public_id);
    }

    /**
     * Operation challengeDeleteWithHttpInfo
     *
     * Delete challenge
     *
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeDeleteWithHttpInfo($public_id)
    {
        $returnType = '';
        $request = $this->challengeDeleteRequest($public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation challengeDeleteAsync
     *
     * Delete challenge
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeDeleteAsync($public_id)
    {
        return $this->challengeDeleteAsyncWithHttpInfo($public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeDeleteAsyncWithHttpInfo
     *
     * Delete challenge
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeDeleteAsyncWithHttpInfo($public_id)
    {
        $returnType = '';
        $request = $this->challengeDeleteRequest($public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeDelete'
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeDeleteRequest($public_id)
    {
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling challengeDelete'
            );
        }

        $resourcePath = '/challenge/{public_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengeLeaderboardHistoryRead
     *
     * Leaderboard history
     *
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\LeaderboardHistory
     */
    public function challengeLeaderboardHistoryRead($public_id)
    {
        list($response) = $this->challengeLeaderboardHistoryReadWithHttpInfo($public_id);
        return $response;
    }

    /**
     * Operation challengeLeaderboardHistoryReadWithHttpInfo
     *
     * Leaderboard history
     *
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\LeaderboardHistory, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeLeaderboardHistoryReadWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\LeaderboardHistory';
        $request = $this->challengeLeaderboardHistoryReadRequest($public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\LeaderboardHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengeLeaderboardHistoryReadAsync
     *
     * Leaderboard history
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeLeaderboardHistoryReadAsync($public_id)
    {
        return $this->challengeLeaderboardHistoryReadAsyncWithHttpInfo($public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeLeaderboardHistoryReadAsyncWithHttpInfo
     *
     * Leaderboard history
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeLeaderboardHistoryReadAsyncWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\LeaderboardHistory';
        $request = $this->challengeLeaderboardHistoryReadRequest($public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeLeaderboardHistoryRead'
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeLeaderboardHistoryReadRequest($public_id)
    {
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling challengeLeaderboardHistoryRead'
            );
        }

        $resourcePath = '/challenge/{public_id}/leaderboard_history/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengeLeaderboardRead
     *
     * Leaderboard
     *
     * @param  string $public_id public_id (required)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\LeaderboardProfileAndTeam
     */
    public function challengeLeaderboardRead($public_id, $date_range = null)
    {
        list($response) = $this->challengeLeaderboardReadWithHttpInfo($public_id, $date_range);
        return $response;
    }

    /**
     * Operation challengeLeaderboardReadWithHttpInfo
     *
     * Leaderboard
     *
     * @param  string $public_id (required)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\LeaderboardProfileAndTeam, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeLeaderboardReadWithHttpInfo($public_id, $date_range = null)
    {
        $returnType = '\WeFitter\Client\Model\LeaderboardProfileAndTeam';
        $request = $this->challengeLeaderboardReadRequest($public_id, $date_range);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\LeaderboardProfileAndTeam',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengeLeaderboardReadAsync
     *
     * Leaderboard
     *
     * @param  string $public_id (required)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeLeaderboardReadAsync($public_id, $date_range = null)
    {
        return $this->challengeLeaderboardReadAsyncWithHttpInfo($public_id, $date_range)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeLeaderboardReadAsyncWithHttpInfo
     *
     * Leaderboard
     *
     * @param  string $public_id (required)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeLeaderboardReadAsyncWithHttpInfo($public_id, $date_range = null)
    {
        $returnType = '\WeFitter\Client\Model\LeaderboardProfileAndTeam';
        $request = $this->challengeLeaderboardReadRequest($public_id, $date_range);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeLeaderboardRead'
     *
     * @param  string $public_id (required)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeLeaderboardReadRequest($public_id, $date_range = null)
    {
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling challengeLeaderboardRead'
            );
        }

        $resourcePath = '/challenge/{public_id}/leaderboard/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($date_range !== null) {
            $queryParams['date_range'] = ObjectSerializer::toQueryValue($date_range, null);
        }

        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengeList
     *
     * List Challenges
     *
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\InlineResponse200
     */
    public function challengeList($limit = null, $offset = null)
    {
        list($response) = $this->challengeListWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation challengeListWithHttpInfo
     *
     * List Challenges
     *
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeListWithHttpInfo($limit = null, $offset = null)
    {
        $returnType = '\WeFitter\Client\Model\InlineResponse200';
        $request = $this->challengeListRequest($limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengeListAsync
     *
     * List Challenges
     *
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeListAsync($limit = null, $offset = null)
    {
        return $this->challengeListAsyncWithHttpInfo($limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeListAsyncWithHttpInfo
     *
     * List Challenges
     *
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeListAsyncWithHttpInfo($limit = null, $offset = null)
    {
        $returnType = '\WeFitter\Client\Model\InlineResponse200';
        $request = $this->challengeListRequest($limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeList'
     *
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeListRequest($limit = null, $offset = null)
    {

        $resourcePath = '/challenge/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengeMemberCreate
     *
     * Add member
     *
     * @param  \WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId $body body (required)
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId
     */
    public function challengeMemberCreate($body, $public_id)
    {
        list($response) = $this->challengeMemberCreateWithHttpInfo($body, $public_id);
        return $response;
    }

    /**
     * Operation challengeMemberCreateWithHttpInfo
     *
     * Add member
     *
     * @param  \WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeMemberCreateWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId';
        $request = $this->challengeMemberCreateRequest($body, $public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengeMemberCreateAsync
     *
     * Add member
     *
     * @param  \WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeMemberCreateAsync($body, $public_id)
    {
        return $this->challengeMemberCreateAsyncWithHttpInfo($body, $public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeMemberCreateAsyncWithHttpInfo
     *
     * Add member
     *
     * @param  \WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeMemberCreateAsyncWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId';
        $request = $this->challengeMemberCreateRequest($body, $public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeMemberCreate'
     *
     * @param  \WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeMemberCreateRequest($body, $public_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling challengeMemberCreate'
            );
        }
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling challengeMemberCreate'
            );
        }

        $resourcePath = '/challenge/{public_id}/member/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengeMemberDelete
     *
     * Remove member
     *
     * @param  string $public_id public_id (required)
     * @param  string $profile A profile public_id is expected (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function challengeMemberDelete($public_id, $profile)
    {
        $this->challengeMemberDeleteWithHttpInfo($public_id, $profile);
    }

    /**
     * Operation challengeMemberDeleteWithHttpInfo
     *
     * Remove member
     *
     * @param  string $public_id (required)
     * @param  string $profile A profile public_id is expected (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeMemberDeleteWithHttpInfo($public_id, $profile)
    {
        $returnType = '';
        $request = $this->challengeMemberDeleteRequest($public_id, $profile);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation challengeMemberDeleteAsync
     *
     * Remove member
     *
     * @param  string $public_id (required)
     * @param  string $profile A profile public_id is expected (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeMemberDeleteAsync($public_id, $profile)
    {
        return $this->challengeMemberDeleteAsyncWithHttpInfo($public_id, $profile)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeMemberDeleteAsyncWithHttpInfo
     *
     * Remove member
     *
     * @param  string $public_id (required)
     * @param  string $profile A profile public_id is expected (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeMemberDeleteAsyncWithHttpInfo($public_id, $profile)
    {
        $returnType = '';
        $request = $this->challengeMemberDeleteRequest($public_id, $profile);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeMemberDelete'
     *
     * @param  string $public_id (required)
     * @param  string $profile A profile public_id is expected (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeMemberDeleteRequest($public_id, $profile)
    {
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling challengeMemberDelete'
            );
        }
        // verify the required parameter 'profile' is set
        if ($profile === null || (is_array($profile) && count($profile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile when calling challengeMemberDelete'
            );
        }

        $resourcePath = '/challenge/{public_id}/member/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($profile !== null) {
            $queryParams['profile'] = ObjectSerializer::toQueryValue($profile, 'uuid');
        }

        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengeMemberUpdate
     *
     * Add member
     *
     * @param  \WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId $body body (required)
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId
     */
    public function challengeMemberUpdate($body, $public_id)
    {
        list($response) = $this->challengeMemberUpdateWithHttpInfo($body, $public_id);
        return $response;
    }

    /**
     * Operation challengeMemberUpdateWithHttpInfo
     *
     * Add member
     *
     * @param  \WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeMemberUpdateWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId';
        $request = $this->challengeMemberUpdateRequest($body, $public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengeMemberUpdateAsync
     *
     * Add member
     *
     * @param  \WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeMemberUpdateAsync($body, $public_id)
    {
        return $this->challengeMemberUpdateAsyncWithHttpInfo($body, $public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeMemberUpdateAsyncWithHttpInfo
     *
     * Add member
     *
     * @param  \WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeMemberUpdateAsyncWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId';
        $request = $this->challengeMemberUpdateRequest($body, $public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeMemberUpdate'
     *
     * @param  \WeFitter\Client\Model\ProfileAsProfilePublicIdAndTeamAsTeamPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeMemberUpdateRequest($body, $public_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling challengeMemberUpdate'
            );
        }
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling challengeMemberUpdate'
            );
        }

        $resourcePath = '/challenge/{public_id}/member/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengeMembersCreate
     *
     * Add members
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body body (required)
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId
     */
    public function challengeMembersCreate($body, $public_id)
    {
        list($response) = $this->challengeMembersCreateWithHttpInfo($body, $public_id);
        return $response;
    }

    /**
     * Operation challengeMembersCreateWithHttpInfo
     *
     * Add members
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeMembersCreateWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId';
        $request = $this->challengeMembersCreateRequest($body, $public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengeMembersCreateAsync
     *
     * Add members
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeMembersCreateAsync($body, $public_id)
    {
        return $this->challengeMembersCreateAsyncWithHttpInfo($body, $public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeMembersCreateAsyncWithHttpInfo
     *
     * Add members
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeMembersCreateAsyncWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId';
        $request = $this->challengeMembersCreateRequest($body, $public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeMembersCreate'
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeMembersCreateRequest($body, $public_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling challengeMembersCreate'
            );
        }
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling challengeMembersCreate'
            );
        }

        $resourcePath = '/challenge/{public_id}/members/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengeMembersUpdate
     *
     * Add members
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body body (required)
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId
     */
    public function challengeMembersUpdate($body, $public_id)
    {
        list($response) = $this->challengeMembersUpdateWithHttpInfo($body, $public_id);
        return $response;
    }

    /**
     * Operation challengeMembersUpdateWithHttpInfo
     *
     * Add members
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeMembersUpdateWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId';
        $request = $this->challengeMembersUpdateRequest($body, $public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengeMembersUpdateAsync
     *
     * Add members
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeMembersUpdateAsync($body, $public_id)
    {
        return $this->challengeMembersUpdateAsyncWithHttpInfo($body, $public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeMembersUpdateAsyncWithHttpInfo
     *
     * Add members
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeMembersUpdateAsyncWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId';
        $request = $this->challengeMembersUpdateRequest($body, $public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeMembersUpdate'
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeMembersUpdateRequest($body, $public_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling challengeMembersUpdate'
            );
        }
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling challengeMembersUpdate'
            );
        }

        $resourcePath = '/challenge/{public_id}/members/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengePartialUpdate
     *
     * Partial edit challenge
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body body (required)
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ChallengeDetail
     */
    public function challengePartialUpdate($body, $public_id)
    {
        list($response) = $this->challengePartialUpdateWithHttpInfo($body, $public_id);
        return $response;
    }

    /**
     * Operation challengePartialUpdateWithHttpInfo
     *
     * Partial edit challenge
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ChallengeDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengePartialUpdateWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ChallengeDetail';
        $request = $this->challengePartialUpdateRequest($body, $public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ChallengeDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengePartialUpdateAsync
     *
     * Partial edit challenge
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengePartialUpdateAsync($body, $public_id)
    {
        return $this->challengePartialUpdateAsyncWithHttpInfo($body, $public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengePartialUpdateAsyncWithHttpInfo
     *
     * Partial edit challenge
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengePartialUpdateAsyncWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ChallengeDetail';
        $request = $this->challengePartialUpdateRequest($body, $public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengePartialUpdate'
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengePartialUpdateRequest($body, $public_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling challengePartialUpdate'
            );
        }
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling challengePartialUpdate'
            );
        }

        $resourcePath = '/challenge/{public_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengePeriods
     *
     * Periods
     *
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ChallengePeriod
     */
    public function challengePeriods($public_id)
    {
        list($response) = $this->challengePeriodsWithHttpInfo($public_id);
        return $response;
    }

    /**
     * Operation challengePeriodsWithHttpInfo
     *
     * Periods
     *
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ChallengePeriod, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengePeriodsWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\ChallengePeriod';
        $request = $this->challengePeriodsRequest($public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ChallengePeriod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengePeriodsAsync
     *
     * Periods
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengePeriodsAsync($public_id)
    {
        return $this->challengePeriodsAsyncWithHttpInfo($public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengePeriodsAsyncWithHttpInfo
     *
     * Periods
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengePeriodsAsyncWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\ChallengePeriod';
        $request = $this->challengePeriodsRequest($public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengePeriods'
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengePeriodsRequest($public_id)
    {
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling challengePeriods'
            );
        }

        $resourcePath = '/challenge/{public_id}/periods/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengeRead
     *
     * Get Challenge
     *
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ChallengeDetail
     */
    public function challengeRead($public_id)
    {
        list($response) = $this->challengeReadWithHttpInfo($public_id);
        return $response;
    }

    /**
     * Operation challengeReadWithHttpInfo
     *
     * Get Challenge
     *
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ChallengeDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeReadWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\ChallengeDetail';
        $request = $this->challengeReadRequest($public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ChallengeDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengeReadAsync
     *
     * Get Challenge
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeReadAsync($public_id)
    {
        return $this->challengeReadAsyncWithHttpInfo($public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeReadAsyncWithHttpInfo
     *
     * Get Challenge
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeReadAsyncWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\ChallengeDetail';
        $request = $this->challengeReadRequest($public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeRead'
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeReadRequest($public_id)
    {
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling challengeRead'
            );
        }

        $resourcePath = '/challenge/{public_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengeRemoveMembers
     *
     * Remove members
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body body (required)
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId
     */
    public function challengeRemoveMembers($body, $public_id)
    {
        list($response) = $this->challengeRemoveMembersWithHttpInfo($body, $public_id);
        return $response;
    }

    /**
     * Operation challengeRemoveMembersWithHttpInfo
     *
     * Remove members
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeRemoveMembersWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId';
        $request = $this->challengeRemoveMembersRequest($body, $public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengeRemoveMembersAsync
     *
     * Remove members
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeRemoveMembersAsync($body, $public_id)
    {
        return $this->challengeRemoveMembersAsyncWithHttpInfo($body, $public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeRemoveMembersAsyncWithHttpInfo
     *
     * Remove members
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeRemoveMembersAsyncWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId';
        $request = $this->challengeRemoveMembersRequest($body, $public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeRemoveMembers'
     *
     * @param  \WeFitter\Client\Model\ProfilePublicIdsListAndTeamAsPublicId $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeRemoveMembersRequest($body, $public_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling challengeRemoveMembers'
            );
        }
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling challengeRemoveMembers'
            );
        }

        $resourcePath = '/challenge/{public_id}/remove_members/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengeTeamList
     *
     * Team leaderboard
     *
     * @param  string $challenge_public_id challenge_public_id (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\InlineResponse2001
     */
    public function challengeTeamList($challenge_public_id, $limit = null, $offset = null, $date_range = null)
    {
        list($response) = $this->challengeTeamListWithHttpInfo($challenge_public_id, $limit, $offset, $date_range);
        return $response;
    }

    /**
     * Operation challengeTeamListWithHttpInfo
     *
     * Team leaderboard
     *
     * @param  string $challenge_public_id (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeTeamListWithHttpInfo($challenge_public_id, $limit = null, $offset = null, $date_range = null)
    {
        $returnType = '\WeFitter\Client\Model\InlineResponse2001';
        $request = $this->challengeTeamListRequest($challenge_public_id, $limit, $offset, $date_range);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengeTeamListAsync
     *
     * Team leaderboard
     *
     * @param  string $challenge_public_id (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeTeamListAsync($challenge_public_id, $limit = null, $offset = null, $date_range = null)
    {
        return $this->challengeTeamListAsyncWithHttpInfo($challenge_public_id, $limit, $offset, $date_range)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeTeamListAsyncWithHttpInfo
     *
     * Team leaderboard
     *
     * @param  string $challenge_public_id (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeTeamListAsyncWithHttpInfo($challenge_public_id, $limit = null, $offset = null, $date_range = null)
    {
        $returnType = '\WeFitter\Client\Model\InlineResponse2001';
        $request = $this->challengeTeamListRequest($challenge_public_id, $limit, $offset, $date_range);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeTeamList'
     *
     * @param  string $challenge_public_id (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeTeamListRequest($challenge_public_id, $limit = null, $offset = null, $date_range = null)
    {
        // verify the required parameter 'challenge_public_id' is set
        if ($challenge_public_id === null || (is_array($challenge_public_id) && count($challenge_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $challenge_public_id when calling challengeTeamList'
            );
        }

        $resourcePath = '/challenge/{challenge_public_id}/team/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }
        // query params
        if ($date_range !== null) {
            $queryParams['date_range'] = ObjectSerializer::toQueryValue($date_range, null);
        }

        // path params
        if ($challenge_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'challenge_public_id' . '}',
                ObjectSerializer::toPathValue($challenge_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengeTeamRead
     *
     * Team contribution
     *
     * @param  string $challenge_public_id challenge_public_id (required)
     * @param  string $team_public_id team_public_id (required)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\LeaderboardProfile
     */
    public function challengeTeamRead($challenge_public_id, $team_public_id, $date_range = null)
    {
        list($response) = $this->challengeTeamReadWithHttpInfo($challenge_public_id, $team_public_id, $date_range);
        return $response;
    }

    /**
     * Operation challengeTeamReadWithHttpInfo
     *
     * Team contribution
     *
     * @param  string $challenge_public_id (required)
     * @param  string $team_public_id (required)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\LeaderboardProfile, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeTeamReadWithHttpInfo($challenge_public_id, $team_public_id, $date_range = null)
    {
        $returnType = '\WeFitter\Client\Model\LeaderboardProfile';
        $request = $this->challengeTeamReadRequest($challenge_public_id, $team_public_id, $date_range);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\LeaderboardProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengeTeamReadAsync
     *
     * Team contribution
     *
     * @param  string $challenge_public_id (required)
     * @param  string $team_public_id (required)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeTeamReadAsync($challenge_public_id, $team_public_id, $date_range = null)
    {
        return $this->challengeTeamReadAsyncWithHttpInfo($challenge_public_id, $team_public_id, $date_range)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeTeamReadAsyncWithHttpInfo
     *
     * Team contribution
     *
     * @param  string $challenge_public_id (required)
     * @param  string $team_public_id (required)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeTeamReadAsyncWithHttpInfo($challenge_public_id, $team_public_id, $date_range = null)
    {
        $returnType = '\WeFitter\Client\Model\LeaderboardProfile';
        $request = $this->challengeTeamReadRequest($challenge_public_id, $team_public_id, $date_range);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeTeamRead'
     *
     * @param  string $challenge_public_id (required)
     * @param  string $team_public_id (required)
     * @param  int $date_range Index of the time period use (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeTeamReadRequest($challenge_public_id, $team_public_id, $date_range = null)
    {
        // verify the required parameter 'challenge_public_id' is set
        if ($challenge_public_id === null || (is_array($challenge_public_id) && count($challenge_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $challenge_public_id when calling challengeTeamRead'
            );
        }
        // verify the required parameter 'team_public_id' is set
        if ($team_public_id === null || (is_array($team_public_id) && count($team_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_public_id when calling challengeTeamRead'
            );
        }

        $resourcePath = '/challenge/{challenge_public_id}/team/{team_public_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($date_range !== null) {
            $queryParams['date_range'] = ObjectSerializer::toQueryValue($date_range, null);
        }

        // path params
        if ($challenge_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'challenge_public_id' . '}',
                ObjectSerializer::toPathValue($challenge_public_id),
                $resourcePath
            );
        }
        // path params
        if ($team_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'team_public_id' . '}',
                ObjectSerializer::toPathValue($team_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation challengeUpdate
     *
     * Edit challenge
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body body (required)
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ChallengeDetail
     */
    public function challengeUpdate($body, $public_id)
    {
        list($response) = $this->challengeUpdateWithHttpInfo($body, $public_id);
        return $response;
    }

    /**
     * Operation challengeUpdateWithHttpInfo
     *
     * Edit challenge
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ChallengeDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function challengeUpdateWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ChallengeDetail';
        $request = $this->challengeUpdateRequest($body, $public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ChallengeDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation challengeUpdateAsync
     *
     * Edit challenge
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeUpdateAsync($body, $public_id)
    {
        return $this->challengeUpdateAsyncWithHttpInfo($body, $public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation challengeUpdateAsyncWithHttpInfo
     *
     * Edit challenge
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function challengeUpdateAsyncWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ChallengeDetail';
        $request = $this->challengeUpdateRequest($body, $public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'challengeUpdate'
     *
     * @param  \WeFitter\Client\Model\ChallengeDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function challengeUpdateRequest($body, $public_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling challengeUpdate'
            );
        }
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling challengeUpdate'
            );
        }

        $resourcePath = '/challenge/{public_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
