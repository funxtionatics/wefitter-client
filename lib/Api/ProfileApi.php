<?php
/**
 * ProfileApi
 * PHP version 5
 *
 * @category Class
 * @package  WeFitter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WeFitter API
 *
 * This is the WeFitter API
 *
 * OpenAPI spec version: v1.1
 * Contact: hello@wefitter.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WeFitter\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WeFitter\Client\ApiException;
use WeFitter\Client\Configuration;
use WeFitter\Client\HeaderSelector;
use WeFitter\Client\ObjectSerializer;

/**
 * ProfileApi Class Doc Comment
 *
 * @category Class
 * @package  WeFitter\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProfileApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation profileActivitiesList
     *
     * DEPRECATED: Workout - Use /workout/ instead.
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\Workout[]
     */
    public function profileActivitiesList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        list($response) = $this->profileActivitiesListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);
        return $response;
    }

    /**
     * Operation profileActivitiesListWithHttpInfo
     *
     * DEPRECATED: Workout - Use /workout/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\Workout[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileActivitiesListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        $returnType = '\WeFitter\Client\Model\Workout[]';
        $request = $this->profileActivitiesListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\Workout[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileActivitiesListAsync
     *
     * DEPRECATED: Workout - Use /workout/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileActivitiesListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        return $this->profileActivitiesListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileActivitiesListAsyncWithHttpInfo
     *
     * DEPRECATED: Workout - Use /workout/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileActivitiesListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        $returnType = '\WeFitter\Client\Model\Workout[]';
        $request = $this->profileActivitiesListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileActivitiesList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileActivitiesListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileActivitiesList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/activities/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }
        // query params
        if ($deduplicate !== null) {
            $queryParams['deduplicate'] = ObjectSerializer::toQueryValue($deduplicate, null);
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileActivityList
     *
     * DEPRECATED: Workout - Use /workout/ instead.
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\Workout[]
     */
    public function profileActivityList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        list($response) = $this->profileActivityListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);
        return $response;
    }

    /**
     * Operation profileActivityListWithHttpInfo
     *
     * DEPRECATED: Workout - Use /workout/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\Workout[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileActivityListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        $returnType = '\WeFitter\Client\Model\Workout[]';
        $request = $this->profileActivityListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\Workout[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileActivityListAsync
     *
     * DEPRECATED: Workout - Use /workout/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileActivityListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        return $this->profileActivityListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileActivityListAsyncWithHttpInfo
     *
     * DEPRECATED: Workout - Use /workout/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileActivityListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        $returnType = '\WeFitter\Client\Model\Workout[]';
        $request = $this->profileActivityListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileActivityList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileActivityListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileActivityList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/activity/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }
        // query params
        if ($deduplicate !== null) {
            $queryParams['deduplicate'] = ObjectSerializer::toQueryValue($deduplicate, null);
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileActivitySegmentList
     *
     * Activity segment
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\Activity[]
     */
    public function profileActivitySegmentList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        list($response) = $this->profileActivitySegmentListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end);
        return $response;
    }

    /**
     * Operation profileActivitySegmentListWithHttpInfo
     *
     * Activity segment
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\Activity[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileActivitySegmentListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\Activity[]';
        $request = $this->profileActivitySegmentListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\Activity[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileActivitySegmentListAsync
     *
     * Activity segment
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileActivitySegmentListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        return $this->profileActivitySegmentListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileActivitySegmentListAsyncWithHttpInfo
     *
     * Activity segment
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileActivitySegmentListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\Activity[]';
        $request = $this->profileActivitySegmentListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileActivitySegmentList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileActivitySegmentListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileActivitySegmentList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/activity_segment/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileBiometricList
     *
     * Bio Metric
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\BioMetric[]
     */
    public function profileBiometricList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        list($response) = $this->profileBiometricListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end);
        return $response;
    }

    /**
     * Operation profileBiometricListWithHttpInfo
     *
     * Bio Metric
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\BioMetric[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileBiometricListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\BioMetric[]';
        $request = $this->profileBiometricListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\BioMetric[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileBiometricListAsync
     *
     * Bio Metric
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileBiometricListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        return $this->profileBiometricListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileBiometricListAsyncWithHttpInfo
     *
     * Bio Metric
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileBiometricListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\BioMetric[]';
        $request = $this->profileBiometricListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileBiometricList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileBiometricListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileBiometricList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/biometric/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileBiometricsList
     *
     * DEPRECATED: Bio Metric - Use /biometric/ instead.
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\BioMetric[]
     */
    public function profileBiometricsList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        list($response) = $this->profileBiometricsListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end);
        return $response;
    }

    /**
     * Operation profileBiometricsListWithHttpInfo
     *
     * DEPRECATED: Bio Metric - Use /biometric/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\BioMetric[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileBiometricsListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\BioMetric[]';
        $request = $this->profileBiometricsListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\BioMetric[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileBiometricsListAsync
     *
     * DEPRECATED: Bio Metric - Use /biometric/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileBiometricsListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        return $this->profileBiometricsListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileBiometricsListAsyncWithHttpInfo
     *
     * DEPRECATED: Bio Metric - Use /biometric/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileBiometricsListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\BioMetric[]';
        $request = $this->profileBiometricsListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileBiometricsList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileBiometricsListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileBiometricsList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/biometrics/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileBmiList
     *
     * BMI
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\BMI[]
     */
    public function profileBmiList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        list($response) = $this->profileBmiListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end);
        return $response;
    }

    /**
     * Operation profileBmiListWithHttpInfo
     *
     * BMI
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\BMI[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileBmiListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\BMI[]';
        $request = $this->profileBmiListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\BMI[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileBmiListAsync
     *
     * BMI
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileBmiListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        return $this->profileBmiListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileBmiListAsyncWithHttpInfo
     *
     * BMI
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileBmiListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\BMI[]';
        $request = $this->profileBmiListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileBmiList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileBmiListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileBmiList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/bmi/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileChallengeRead
     *
     * Challenge
     *
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ProfileChallengeList
     */
    public function profileChallengeRead($public_id)
    {
        list($response) = $this->profileChallengeReadWithHttpInfo($public_id);
        return $response;
    }

    /**
     * Operation profileChallengeReadWithHttpInfo
     *
     * Challenge
     *
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ProfileChallengeList, HTTP status code, HTTP response headers (array of strings)
     */
    public function profileChallengeReadWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileChallengeList';
        $request = $this->profileChallengeReadRequest($public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ProfileChallengeList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileChallengeReadAsync
     *
     * Challenge
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileChallengeReadAsync($public_id)
    {
        return $this->profileChallengeReadAsyncWithHttpInfo($public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileChallengeReadAsyncWithHttpInfo
     *
     * Challenge
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileChallengeReadAsyncWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileChallengeList';
        $request = $this->profileChallengeReadRequest($public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileChallengeRead'
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileChallengeReadRequest($public_id)
    {
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling profileChallengeRead'
            );
        }

        $resourcePath = '/profile/{public_id}/challenge/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileChallenges
     *
     * Challenges
     *
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ProfileChallengeList
     */
    public function profileChallenges($public_id)
    {
        list($response) = $this->profileChallengesWithHttpInfo($public_id);
        return $response;
    }

    /**
     * Operation profileChallengesWithHttpInfo
     *
     * Challenges
     *
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ProfileChallengeList, HTTP status code, HTTP response headers (array of strings)
     */
    public function profileChallengesWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileChallengeList';
        $request = $this->profileChallengesRequest($public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ProfileChallengeList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileChallengesAsync
     *
     * Challenges
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileChallengesAsync($public_id)
    {
        return $this->profileChallengesAsyncWithHttpInfo($public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileChallengesAsyncWithHttpInfo
     *
     * Challenges
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileChallengesAsyncWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileChallengeList';
        $request = $this->profileChallengesRequest($public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileChallenges'
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileChallengesRequest($public_id)
    {
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling profileChallenges'
            );
        }

        $resourcePath = '/profile/{public_id}/challenges/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileConnectionWidgetRead
     *
     * Connections Widget
     *
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\AppConnectionConnectionWidget
     */
    public function profileConnectionWidgetRead($public_id)
    {
        list($response) = $this->profileConnectionWidgetReadWithHttpInfo($public_id);
        return $response;
    }

    /**
     * Operation profileConnectionWidgetReadWithHttpInfo
     *
     * Connections Widget
     *
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\AppConnectionConnectionWidget, HTTP status code, HTTP response headers (array of strings)
     */
    public function profileConnectionWidgetReadWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\AppConnectionConnectionWidget';
        $request = $this->profileConnectionWidgetReadRequest($public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\AppConnectionConnectionWidget',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileConnectionWidgetReadAsync
     *
     * Connections Widget
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileConnectionWidgetReadAsync($public_id)
    {
        return $this->profileConnectionWidgetReadAsyncWithHttpInfo($public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileConnectionWidgetReadAsyncWithHttpInfo
     *
     * Connections Widget
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileConnectionWidgetReadAsyncWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\AppConnectionConnectionWidget';
        $request = $this->profileConnectionWidgetReadRequest($public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileConnectionWidgetRead'
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileConnectionWidgetReadRequest($public_id)
    {
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling profileConnectionWidgetRead'
            );
        }

        $resourcePath = '/profile/{public_id}/connection_widget/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileConnectionsRead
     *
     * Connections
     *
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ProfileAppConnectionList
     */
    public function profileConnectionsRead($public_id)
    {
        list($response) = $this->profileConnectionsReadWithHttpInfo($public_id);
        return $response;
    }

    /**
     * Operation profileConnectionsReadWithHttpInfo
     *
     * Connections
     *
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ProfileAppConnectionList, HTTP status code, HTTP response headers (array of strings)
     */
    public function profileConnectionsReadWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileAppConnectionList';
        $request = $this->profileConnectionsReadRequest($public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ProfileAppConnectionList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileConnectionsReadAsync
     *
     * Connections
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileConnectionsReadAsync($public_id)
    {
        return $this->profileConnectionsReadAsyncWithHttpInfo($public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileConnectionsReadAsyncWithHttpInfo
     *
     * Connections
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileConnectionsReadAsyncWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileAppConnectionList';
        $request = $this->profileConnectionsReadRequest($public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileConnectionsRead'
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileConnectionsReadRequest($public_id)
    {
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling profileConnectionsRead'
            );
        }

        $resourcePath = '/profile/{public_id}/connections/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileCreate
     *
     * Create Profile
     *
     * @param  \WeFitter\Client\Model\ProfileCreated $body body (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ProfileCreated
     */
    public function profileCreate($body)
    {
        list($response) = $this->profileCreateWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation profileCreateWithHttpInfo
     *
     * Create Profile
     *
     * @param  \WeFitter\Client\Model\ProfileCreated $body (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ProfileCreated, HTTP status code, HTTP response headers (array of strings)
     */
    public function profileCreateWithHttpInfo($body)
    {
        $returnType = '\WeFitter\Client\Model\ProfileCreated';
        $request = $this->profileCreateRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ProfileCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileCreateAsync
     *
     * Create Profile
     *
     * @param  \WeFitter\Client\Model\ProfileCreated $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileCreateAsync($body)
    {
        return $this->profileCreateAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileCreateAsyncWithHttpInfo
     *
     * Create Profile
     *
     * @param  \WeFitter\Client\Model\ProfileCreated $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileCreateAsyncWithHttpInfo($body)
    {
        $returnType = '\WeFitter\Client\Model\ProfileCreated';
        $request = $this->profileCreateRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileCreate'
     *
     * @param  \WeFitter\Client\Model\ProfileCreated $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileCreateRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling profileCreate'
            );
        }

        $resourcePath = '/profile/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileDailySummariesList
     *
     * DEPRECATED: Daily Summary - Use /daily_summary/ instead.
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\DailySummary[]
     */
    public function profileDailySummariesList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        list($response) = $this->profileDailySummariesListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);
        return $response;
    }

    /**
     * Operation profileDailySummariesListWithHttpInfo
     *
     * DEPRECATED: Daily Summary - Use /daily_summary/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\DailySummary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileDailySummariesListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        $returnType = '\WeFitter\Client\Model\DailySummary[]';
        $request = $this->profileDailySummariesListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\DailySummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileDailySummariesListAsync
     *
     * DEPRECATED: Daily Summary - Use /daily_summary/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileDailySummariesListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        return $this->profileDailySummariesListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileDailySummariesListAsyncWithHttpInfo
     *
     * DEPRECATED: Daily Summary - Use /daily_summary/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileDailySummariesListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        $returnType = '\WeFitter\Client\Model\DailySummary[]';
        $request = $this->profileDailySummariesListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileDailySummariesList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileDailySummariesListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileDailySummariesList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/daily_summaries/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }
        // query params
        if ($deduplicate !== null) {
            $queryParams['deduplicate'] = ObjectSerializer::toQueryValue($deduplicate, null);
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileDailySummaryList
     *
     * Daily Summary
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\DailySummary[]
     */
    public function profileDailySummaryList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        list($response) = $this->profileDailySummaryListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);
        return $response;
    }

    /**
     * Operation profileDailySummaryListWithHttpInfo
     *
     * Daily Summary
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\DailySummary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileDailySummaryListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        $returnType = '\WeFitter\Client\Model\DailySummary[]';
        $request = $this->profileDailySummaryListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\DailySummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileDailySummaryListAsync
     *
     * Daily Summary
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileDailySummaryListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        return $this->profileDailySummaryListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileDailySummaryListAsyncWithHttpInfo
     *
     * Daily Summary
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileDailySummaryListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        $returnType = '\WeFitter\Client\Model\DailySummary[]';
        $request = $this->profileDailySummaryListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileDailySummaryList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileDailySummaryListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileDailySummaryList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/daily_summary/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }
        // query params
        if ($deduplicate !== null) {
            $queryParams['deduplicate'] = ObjectSerializer::toQueryValue($deduplicate, null);
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileDailySummarySampleList
     *
     * Daily Summary Sample
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\DailySummarySample[]
     */
    public function profileDailySummarySampleList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        list($response) = $this->profileDailySummarySampleListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end);
        return $response;
    }

    /**
     * Operation profileDailySummarySampleListWithHttpInfo
     *
     * Daily Summary Sample
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\DailySummarySample[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileDailySummarySampleListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\DailySummarySample[]';
        $request = $this->profileDailySummarySampleListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\DailySummarySample[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileDailySummarySampleListAsync
     *
     * Daily Summary Sample
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileDailySummarySampleListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        return $this->profileDailySummarySampleListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileDailySummarySampleListAsyncWithHttpInfo
     *
     * Daily Summary Sample
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileDailySummarySampleListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\DailySummarySample[]';
        $request = $this->profileDailySummarySampleListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileDailySummarySampleList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileDailySummarySampleListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileDailySummarySampleList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/daily_summary_sample/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileDelete
     *
     * Delete Profile
     *
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function profileDelete($public_id)
    {
        $this->profileDeleteWithHttpInfo($public_id);
    }

    /**
     * Operation profileDeleteWithHttpInfo
     *
     * Delete Profile
     *
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function profileDeleteWithHttpInfo($public_id)
    {
        $returnType = '';
        $request = $this->profileDeleteRequest($public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation profileDeleteAsync
     *
     * Delete Profile
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileDeleteAsync($public_id)
    {
        return $this->profileDeleteAsyncWithHttpInfo($public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileDeleteAsyncWithHttpInfo
     *
     * Delete Profile
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileDeleteAsyncWithHttpInfo($public_id)
    {
        $returnType = '';
        $request = $this->profileDeleteRequest($public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileDelete'
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileDeleteRequest($public_id)
    {
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling profileDelete'
            );
        }

        $resourcePath = '/profile/{public_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileEventCreate
     *
     * Create Event
     *
     * @param  \WeFitter\Client\Model\Event $body body (required)
     * @param  string $profile_public_id profile_public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\Event
     */
    public function profileEventCreate($body, $profile_public_id)
    {
        list($response) = $this->profileEventCreateWithHttpInfo($body, $profile_public_id);
        return $response;
    }

    /**
     * Operation profileEventCreateWithHttpInfo
     *
     * Create Event
     *
     * @param  \WeFitter\Client\Model\Event $body (required)
     * @param  string $profile_public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\Event, HTTP status code, HTTP response headers (array of strings)
     */
    public function profileEventCreateWithHttpInfo($body, $profile_public_id)
    {
        $returnType = '\WeFitter\Client\Model\Event';
        $request = $this->profileEventCreateRequest($body, $profile_public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\Event',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileEventCreateAsync
     *
     * Create Event
     *
     * @param  \WeFitter\Client\Model\Event $body (required)
     * @param  string $profile_public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileEventCreateAsync($body, $profile_public_id)
    {
        return $this->profileEventCreateAsyncWithHttpInfo($body, $profile_public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileEventCreateAsyncWithHttpInfo
     *
     * Create Event
     *
     * @param  \WeFitter\Client\Model\Event $body (required)
     * @param  string $profile_public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileEventCreateAsyncWithHttpInfo($body, $profile_public_id)
    {
        $returnType = '\WeFitter\Client\Model\Event';
        $request = $this->profileEventCreateRequest($body, $profile_public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileEventCreate'
     *
     * @param  \WeFitter\Client\Model\Event $body (required)
     * @param  string $profile_public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileEventCreateRequest($body, $profile_public_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling profileEventCreate'
            );
        }
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileEventCreate'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/event/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileEventList
     *
     * Event
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\Event[]
     */
    public function profileEventList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        list($response) = $this->profileEventListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end);
        return $response;
    }

    /**
     * Operation profileEventListWithHttpInfo
     *
     * Event
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\Event[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileEventListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\Event[]';
        $request = $this->profileEventListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\Event[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileEventListAsync
     *
     * Event
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileEventListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        return $this->profileEventListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileEventListAsyncWithHttpInfo
     *
     * Event
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileEventListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\Event[]';
        $request = $this->profileEventListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileEventList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileEventListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileEventList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/event/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileHeartrateSummariesList
     *
     * DEPRECATED: Heart Rate Summary - Use /heartrate_summary/ instead.
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\HeartRateSummary[]
     */
    public function profileHeartrateSummariesList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        list($response) = $this->profileHeartrateSummariesListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end);
        return $response;
    }

    /**
     * Operation profileHeartrateSummariesListWithHttpInfo
     *
     * DEPRECATED: Heart Rate Summary - Use /heartrate_summary/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\HeartRateSummary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileHeartrateSummariesListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\HeartRateSummary[]';
        $request = $this->profileHeartrateSummariesListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\HeartRateSummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileHeartrateSummariesListAsync
     *
     * DEPRECATED: Heart Rate Summary - Use /heartrate_summary/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileHeartrateSummariesListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        return $this->profileHeartrateSummariesListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileHeartrateSummariesListAsyncWithHttpInfo
     *
     * DEPRECATED: Heart Rate Summary - Use /heartrate_summary/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileHeartrateSummariesListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\HeartRateSummary[]';
        $request = $this->profileHeartrateSummariesListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileHeartrateSummariesList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileHeartrateSummariesListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileHeartrateSummariesList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/heartrate_summaries/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileHeartrateSummaryList
     *
     * Heart Rate Summary
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\HeartRateSummary[]
     */
    public function profileHeartrateSummaryList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        list($response) = $this->profileHeartrateSummaryListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end);
        return $response;
    }

    /**
     * Operation profileHeartrateSummaryListWithHttpInfo
     *
     * Heart Rate Summary
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\HeartRateSummary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileHeartrateSummaryListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\HeartRateSummary[]';
        $request = $this->profileHeartrateSummaryListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\HeartRateSummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileHeartrateSummaryListAsync
     *
     * Heart Rate Summary
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileHeartrateSummaryListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        return $this->profileHeartrateSummaryListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileHeartrateSummaryListAsyncWithHttpInfo
     *
     * Heart Rate Summary
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileHeartrateSummaryListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\HeartRateSummary[]';
        $request = $this->profileHeartrateSummaryListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileHeartrateSummaryList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileHeartrateSummaryListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileHeartrateSummaryList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/heartrate_summary/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileHeightList
     *
     * Height
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\Height[]
     */
    public function profileHeightList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        list($response) = $this->profileHeightListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end);
        return $response;
    }

    /**
     * Operation profileHeightListWithHttpInfo
     *
     * Height
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\Height[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileHeightListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\Height[]';
        $request = $this->profileHeightListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\Height[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileHeightListAsync
     *
     * Height
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileHeightListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        return $this->profileHeightListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileHeightListAsyncWithHttpInfo
     *
     * Height
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileHeightListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\Height[]';
        $request = $this->profileHeightListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileHeightList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileHeightListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileHeightList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/height/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileList
     *
     * List Profiles
     *
     * @param  string $search A search term. (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\InlineResponse2002
     */
    public function profileList($search = null, $limit = null, $offset = null)
    {
        list($response) = $this->profileListWithHttpInfo($search, $limit, $offset);
        return $response;
    }

    /**
     * Operation profileListWithHttpInfo
     *
     * List Profiles
     *
     * @param  string $search A search term. (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function profileListWithHttpInfo($search = null, $limit = null, $offset = null)
    {
        $returnType = '\WeFitter\Client\Model\InlineResponse2002';
        $request = $this->profileListRequest($search, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileListAsync
     *
     * List Profiles
     *
     * @param  string $search A search term. (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileListAsync($search = null, $limit = null, $offset = null)
    {
        return $this->profileListAsyncWithHttpInfo($search, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileListAsyncWithHttpInfo
     *
     * List Profiles
     *
     * @param  string $search A search term. (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileListAsyncWithHttpInfo($search = null, $limit = null, $offset = null)
    {
        $returnType = '\WeFitter\Client\Model\InlineResponse2002';
        $request = $this->profileListRequest($search, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileList'
     *
     * @param  string $search A search term. (optional)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileListRequest($search = null, $limit = null, $offset = null)
    {

        $resourcePath = '/profile/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profilePartialUpdate
     *
     * Partial Update
     *
     * @param  \WeFitter\Client\Model\ProfileDetail $body body (required)
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ProfileDetail
     */
    public function profilePartialUpdate($body, $public_id)
    {
        list($response) = $this->profilePartialUpdateWithHttpInfo($body, $public_id);
        return $response;
    }

    /**
     * Operation profilePartialUpdateWithHttpInfo
     *
     * Partial Update
     *
     * @param  \WeFitter\Client\Model\ProfileDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ProfileDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function profilePartialUpdateWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileDetail';
        $request = $this->profilePartialUpdateRequest($body, $public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ProfileDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profilePartialUpdateAsync
     *
     * Partial Update
     *
     * @param  \WeFitter\Client\Model\ProfileDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profilePartialUpdateAsync($body, $public_id)
    {
        return $this->profilePartialUpdateAsyncWithHttpInfo($body, $public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profilePartialUpdateAsyncWithHttpInfo
     *
     * Partial Update
     *
     * @param  \WeFitter\Client\Model\ProfileDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profilePartialUpdateAsyncWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileDetail';
        $request = $this->profilePartialUpdateRequest($body, $public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profilePartialUpdate'
     *
     * @param  \WeFitter\Client\Model\ProfileDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profilePartialUpdateRequest($body, $public_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling profilePartialUpdate'
            );
        }
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling profilePartialUpdate'
            );
        }

        $resourcePath = '/profile/{public_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileRead
     *
     * Get Profile
     *
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ProfileDetail
     */
    public function profileRead($public_id)
    {
        list($response) = $this->profileReadWithHttpInfo($public_id);
        return $response;
    }

    /**
     * Operation profileReadWithHttpInfo
     *
     * Get Profile
     *
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ProfileDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function profileReadWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileDetail';
        $request = $this->profileReadRequest($public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ProfileDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileReadAsync
     *
     * Get Profile
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileReadAsync($public_id)
    {
        return $this->profileReadAsyncWithHttpInfo($public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileReadAsyncWithHttpInfo
     *
     * Get Profile
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileReadAsyncWithHttpInfo($public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileDetail';
        $request = $this->profileReadRequest($public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileRead'
     *
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileReadRequest($public_id)
    {
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling profileRead'
            );
        }

        $resourcePath = '/profile/{public_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileRegisterPushNotificationsDelete
     *
     * Remove a push notification registration
     *
     * @param  string $public_id public_id (required)
     * @param  string $device_identifier Unique identifier for the device (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function profileRegisterPushNotificationsDelete($public_id, $device_identifier)
    {
        $this->profileRegisterPushNotificationsDeleteWithHttpInfo($public_id, $device_identifier);
    }

    /**
     * Operation profileRegisterPushNotificationsDeleteWithHttpInfo
     *
     * Remove a push notification registration
     *
     * @param  string $public_id (required)
     * @param  string $device_identifier Unique identifier for the device (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function profileRegisterPushNotificationsDeleteWithHttpInfo($public_id, $device_identifier)
    {
        $returnType = '';
        $request = $this->profileRegisterPushNotificationsDeleteRequest($public_id, $device_identifier);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation profileRegisterPushNotificationsDeleteAsync
     *
     * Remove a push notification registration
     *
     * @param  string $public_id (required)
     * @param  string $device_identifier Unique identifier for the device (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileRegisterPushNotificationsDeleteAsync($public_id, $device_identifier)
    {
        return $this->profileRegisterPushNotificationsDeleteAsyncWithHttpInfo($public_id, $device_identifier)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileRegisterPushNotificationsDeleteAsyncWithHttpInfo
     *
     * Remove a push notification registration
     *
     * @param  string $public_id (required)
     * @param  string $device_identifier Unique identifier for the device (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileRegisterPushNotificationsDeleteAsyncWithHttpInfo($public_id, $device_identifier)
    {
        $returnType = '';
        $request = $this->profileRegisterPushNotificationsDeleteRequest($public_id, $device_identifier);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileRegisterPushNotificationsDelete'
     *
     * @param  string $public_id (required)
     * @param  string $device_identifier Unique identifier for the device (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileRegisterPushNotificationsDeleteRequest($public_id, $device_identifier)
    {
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling profileRegisterPushNotificationsDelete'
            );
        }
        // verify the required parameter 'device_identifier' is set
        if ($device_identifier === null || (is_array($device_identifier) && count($device_identifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $device_identifier when calling profileRegisterPushNotificationsDelete'
            );
        }

        $resourcePath = '/profile/{public_id}/register_push_notifications/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($device_identifier !== null) {
            $queryParams['device_identifier'] = ObjectSerializer::toQueryValue($device_identifier, null);
        }

        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileRegisterPushNotificationsUpdate
     *
     * Add push notification registration
     *
     * @param  \WeFitter\Client\Model\FCMToken $body body (required)
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\FCMToken
     */
    public function profileRegisterPushNotificationsUpdate($body, $public_id)
    {
        list($response) = $this->profileRegisterPushNotificationsUpdateWithHttpInfo($body, $public_id);
        return $response;
    }

    /**
     * Operation profileRegisterPushNotificationsUpdateWithHttpInfo
     *
     * Add push notification registration
     *
     * @param  \WeFitter\Client\Model\FCMToken $body (required)
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\FCMToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function profileRegisterPushNotificationsUpdateWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\FCMToken';
        $request = $this->profileRegisterPushNotificationsUpdateRequest($body, $public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\FCMToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileRegisterPushNotificationsUpdateAsync
     *
     * Add push notification registration
     *
     * @param  \WeFitter\Client\Model\FCMToken $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileRegisterPushNotificationsUpdateAsync($body, $public_id)
    {
        return $this->profileRegisterPushNotificationsUpdateAsyncWithHttpInfo($body, $public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileRegisterPushNotificationsUpdateAsyncWithHttpInfo
     *
     * Add push notification registration
     *
     * @param  \WeFitter\Client\Model\FCMToken $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileRegisterPushNotificationsUpdateAsyncWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\FCMToken';
        $request = $this->profileRegisterPushNotificationsUpdateRequest($body, $public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileRegisterPushNotificationsUpdate'
     *
     * @param  \WeFitter\Client\Model\FCMToken $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileRegisterPushNotificationsUpdateRequest($body, $public_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling profileRegisterPushNotificationsUpdate'
            );
        }
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling profileRegisterPushNotificationsUpdate'
            );
        }

        $resourcePath = '/profile/{public_id}/register_push_notifications/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileSleepSummariesList
     *
     * DEPRECATED: Sleep Summary - Use /sleep_summary/ instead.
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\SleepSummary[]
     */
    public function profileSleepSummariesList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        list($response) = $this->profileSleepSummariesListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end);
        return $response;
    }

    /**
     * Operation profileSleepSummariesListWithHttpInfo
     *
     * DEPRECATED: Sleep Summary - Use /sleep_summary/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\SleepSummary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileSleepSummariesListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\SleepSummary[]';
        $request = $this->profileSleepSummariesListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\SleepSummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileSleepSummariesListAsync
     *
     * DEPRECATED: Sleep Summary - Use /sleep_summary/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileSleepSummariesListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        return $this->profileSleepSummariesListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileSleepSummariesListAsyncWithHttpInfo
     *
     * DEPRECATED: Sleep Summary - Use /sleep_summary/ instead.
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileSleepSummariesListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\SleepSummary[]';
        $request = $this->profileSleepSummariesListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileSleepSummariesList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileSleepSummariesListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileSleepSummariesList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/sleep_summaries/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileSleepSummaryList
     *
     * Sleep Summary
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\SleepSummary[]
     */
    public function profileSleepSummaryList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        list($response) = $this->profileSleepSummaryListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end);
        return $response;
    }

    /**
     * Operation profileSleepSummaryListWithHttpInfo
     *
     * Sleep Summary
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\SleepSummary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileSleepSummaryListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\SleepSummary[]';
        $request = $this->profileSleepSummaryListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\SleepSummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileSleepSummaryListAsync
     *
     * Sleep Summary
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileSleepSummaryListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        return $this->profileSleepSummaryListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileSleepSummaryListAsyncWithHttpInfo
     *
     * Sleep Summary
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileSleepSummaryListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\SleepSummary[]';
        $request = $this->profileSleepSummaryListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileSleepSummaryList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileSleepSummaryListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileSleepSummaryList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/sleep_summary/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileStressSamplesList
     *
     * Stress Sample
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\StressSample[]
     */
    public function profileStressSamplesList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        list($response) = $this->profileStressSamplesListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end);
        return $response;
    }

    /**
     * Operation profileStressSamplesListWithHttpInfo
     *
     * Stress Sample
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\StressSample[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileStressSamplesListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\StressSample[]';
        $request = $this->profileStressSamplesListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\StressSample[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileStressSamplesListAsync
     *
     * Stress Sample
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileStressSamplesListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        return $this->profileStressSamplesListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileStressSamplesListAsyncWithHttpInfo
     *
     * Stress Sample
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileStressSamplesListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\StressSample[]';
        $request = $this->profileStressSamplesListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileStressSamplesList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileStressSamplesListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileStressSamplesList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/stress_samples/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileStressSummaryList
     *
     * Stress Summary
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\StressSummary[]
     */
    public function profileStressSummaryList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        list($response) = $this->profileStressSummaryListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end);
        return $response;
    }

    /**
     * Operation profileStressSummaryListWithHttpInfo
     *
     * Stress Summary
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\StressSummary[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileStressSummaryListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\StressSummary[]';
        $request = $this->profileStressSummaryListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\StressSummary[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileStressSummaryListAsync
     *
     * Stress Summary
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileStressSummaryListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        return $this->profileStressSummaryListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileStressSummaryListAsyncWithHttpInfo
     *
     * Stress Summary
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileStressSummaryListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\StressSummary[]';
        $request = $this->profileStressSummaryListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileStressSummaryList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileStressSummaryListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileStressSummaryList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/stress_summary/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileUpdate
     *
     * Update profile
     *
     * @param  \WeFitter\Client\Model\ProfileDetail $body body (required)
     * @param  string $public_id public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\ProfileDetail
     */
    public function profileUpdate($body, $public_id)
    {
        list($response) = $this->profileUpdateWithHttpInfo($body, $public_id);
        return $response;
    }

    /**
     * Operation profileUpdateWithHttpInfo
     *
     * Update profile
     *
     * @param  \WeFitter\Client\Model\ProfileDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\ProfileDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function profileUpdateWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileDetail';
        $request = $this->profileUpdateRequest($body, $public_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\ProfileDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileUpdateAsync
     *
     * Update profile
     *
     * @param  \WeFitter\Client\Model\ProfileDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileUpdateAsync($body, $public_id)
    {
        return $this->profileUpdateAsyncWithHttpInfo($body, $public_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileUpdateAsyncWithHttpInfo
     *
     * Update profile
     *
     * @param  \WeFitter\Client\Model\ProfileDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileUpdateAsyncWithHttpInfo($body, $public_id)
    {
        $returnType = '\WeFitter\Client\Model\ProfileDetail';
        $request = $this->profileUpdateRequest($body, $public_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileUpdate'
     *
     * @param  \WeFitter\Client\Model\ProfileDetail $body (required)
     * @param  string $public_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileUpdateRequest($body, $public_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling profileUpdate'
            );
        }
        // verify the required parameter 'public_id' is set
        if ($public_id === null || (is_array($public_id) && count($public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_id when calling profileUpdate'
            );
        }

        $resourcePath = '/profile/{public_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'public_id' . '}',
                ObjectSerializer::toPathValue($public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileWeightList
     *
     * Weight
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\Weight[]
     */
    public function profileWeightList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        list($response) = $this->profileWeightListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end);
        return $response;
    }

    /**
     * Operation profileWeightListWithHttpInfo
     *
     * Weight
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\Weight[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileWeightListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\Weight[]';
        $request = $this->profileWeightListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\Weight[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileWeightListAsync
     *
     * Weight
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileWeightListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        return $this->profileWeightListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileWeightListAsyncWithHttpInfo
     *
     * Weight
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileWeightListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        $returnType = '\WeFitter\Client\Model\Weight[]';
        $request = $this->profileWeightListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileWeightList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileWeightListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileWeightList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/weight/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation profileWorkoutList
     *
     * Workout
     *
     * @param  string $profile_public_id profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WeFitter\Client\Model\Workout[]
     */
    public function profileWorkoutList($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        list($response) = $this->profileWorkoutListWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);
        return $response;
    }

    /**
     * Operation profileWorkoutListWithHttpInfo
     *
     * Workout
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \WeFitter\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WeFitter\Client\Model\Workout[], HTTP status code, HTTP response headers (array of strings)
     */
    public function profileWorkoutListWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        $returnType = '\WeFitter\Client\Model\Workout[]';
        $request = $this->profileWorkoutListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WeFitter\Client\Model\Workout[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation profileWorkoutListAsync
     *
     * Workout
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileWorkoutListAsync($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        return $this->profileWorkoutListAsyncWithHttpInfo($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation profileWorkoutListAsyncWithHttpInfo
     *
     * Workout
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function profileWorkoutListAsyncWithHttpInfo($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        $returnType = '\WeFitter\Client\Model\Workout[]';
        $request = $this->profileWorkoutListRequest($profile_public_id, $cursor, $page_size, $date_start, $date_end, $deduplicate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'profileWorkoutList'
     *
     * @param  string $profile_public_id (required)
     * @param  string $cursor The pagination cursor value. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  \DateTime $date_start Lower bound of date or timestamp. (optional)
     * @param  \DateTime $date_end Upper bound of date or timestamp. (optional)
     * @param  bool $deduplicate If set to true, duplicates will be aggregated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function profileWorkoutListRequest($profile_public_id, $cursor = null, $page_size = null, $date_start = null, $date_end = null, $deduplicate = null)
    {
        // verify the required parameter 'profile_public_id' is set
        if ($profile_public_id === null || (is_array($profile_public_id) && count($profile_public_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_public_id when calling profileWorkoutList'
            );
        }

        $resourcePath = '/profile/{profile_public_id}/workout/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start, 'date-time');
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end, 'date-time');
        }
        // query params
        if ($deduplicate !== null) {
            $queryParams['deduplicate'] = ObjectSerializer::toQueryValue($deduplicate, null);
        }

        // path params
        if ($profile_public_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_public_id' . '}',
                ObjectSerializer::toPathValue($profile_public_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
